#!/bin/bash

# DOCKER SETUP HOST - Configuraci√≥n autom√°tica del host
# =====================================================
# Este script configura el host para que Docker funcione
# correctamente con el dispositivo USB SecuGen

echo "üê≥ CONFIGURACI√ìN DEL HOST PARA DOCKER SECUGEN"
echo "=============================================="

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Variables
LOG_FILE="logs/docker_setup_host.log"
USUARIO_ACTUAL=$(whoami)

# Crear directorio de logs
mkdir -p logs

# Funci√≥n para logging
log_message() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a "$LOG_FILE"
}

# Funci√≥n para mostrar pasos
show_step() {
    echo -e "\n${BLUE}üîß PASO $1: $2${NC}"
    echo "----------------------------------------"
}

# Funci√≥n para verificar si se ejecuta como root
check_root() {
    if [ "$EUID" -eq 0 ]; then
        echo -e "${RED}‚ùå NO ejecutes este script como root${NC}"
        echo "üí° Ejecuta como usuario normal: $0"
        exit 1
    fi
}

# Funci√≥n para verificar sudo
check_sudo() {
    if ! sudo -v; then
        echo -e "${RED}‚ùå Necesitas permisos sudo para continuar${NC}"
        exit 1
    fi
}

# Funci√≥n para verificar Docker
check_docker() {
    echo "üê≥ Verificando Docker..."
    
    if ! command -v docker &> /dev/null; then
        echo -e "${YELLOW}‚ö†Ô∏è Docker no est√° instalado${NC}"
        echo "üîß Instalando Docker..."
        
        # Instalar Docker
        curl -fsSL https://get.docker.com -o get-docker.sh
        sudo sh get-docker.sh
        rm get-docker.sh
        
        # Agregar usuario al grupo docker
        sudo usermod -aG docker "$USUARIO_ACTUAL"
        
        echo -e "${GREEN}‚úÖ Docker instalado${NC}"
        log_message "Docker instalado correctamente"
    else
        echo -e "${GREEN}‚úÖ Docker ya est√° instalado${NC}"
        log_message "Docker ya est√° disponible"
    fi
    
    # Verificar Docker Compose
    if ! command -v docker-compose &> /dev/null; then
        echo -e "${YELLOW}‚ö†Ô∏è Docker Compose no est√° instalado${NC}"
        echo "üîß Instalando Docker Compose..."
        
        # Instalar Docker Compose
        sudo apt update
        sudo apt install -y docker-compose
        
        echo -e "${GREEN}‚úÖ Docker Compose instalado${NC}"
        log_message "Docker Compose instalado correctamente"
    else
        echo -e "${GREEN}‚úÖ Docker Compose ya est√° instalado${NC}"
        log_message "Docker Compose ya est√° disponible"
    fi
}

# Funci√≥n para verificar dispositivo USB
verify_usb_device() {
    echo "üîç Verificando dispositivo USB SecuGen..."
    
    if lsusb | grep -q "1162:2201"; then
        echo -e "${GREEN}‚úÖ Dispositivo SecuGen detectado${NC}"
        lsusb | grep "1162:2201"
        log_message "Dispositivo SecuGen detectado"
        return 0
    else
        echo -e "${YELLOW}‚ö†Ô∏è Dispositivo SecuGen no detectado${NC}"
        echo "Dispositivos USB disponibles:"
        lsusb
        log_message "Dispositivo SecuGen no detectado"
        return 1
    fi
}

# Funci√≥n para instalar reglas udev
install_udev_rules() {
    echo "üìã Configurando reglas udev..."
    
    # Verificar que el archivo existe
    if [ -f "docker/99SecuGen.rules" ]; then
        # Copiar reglas udev
        sudo cp docker/99SecuGen.rules /etc/udev/rules.d/
        
        # Configurar permisos
        sudo chmod 644 /etc/udev/rules.d/99SecuGen.rules
        sudo chown root:root /etc/udev/rules.d/99SecuGen.rules
        
        # Recargar reglas
        sudo udevadm control --reload-rules
        sudo udevadm trigger
        
        echo -e "${GREEN}‚úÖ Reglas udev instaladas${NC}"
        log_message "Reglas udev instaladas correctamente"
    else
        echo -e "${RED}‚ùå Archivo docker/99SecuGen.rules no encontrado${NC}"
        exit 1
    fi
}

# Funci√≥n para configurar permisos USB
configure_usb_permissions() {
    echo "üîê Configurando permisos USB..."
    
    # Agregar usuario a grupos necesarios
    sudo usermod -a -G dialout "$USUARIO_ACTUAL"
    sudo usermod -a -G plugdev "$USUARIO_ACTUAL"
    
    # Verificar que los grupos existen
    if ! getent group dialout >/dev/null; then
        sudo groupadd dialout
    fi
    
    if ! getent group plugdev >/dev/null; then
        sudo groupadd plugdev
    fi
    
    # Configurar permisos para Docker
    sudo usermod -a -G docker "$USUARIO_ACTUAL"
    
    echo -e "${GREEN}‚úÖ Permisos USB configurados${NC}"
    log_message "Permisos USB configurados para $USUARIO_ACTUAL"
}

# Funci√≥n para crear directorios necesarios
create_directories() {
    echo "üìÅ Creando directorios necesarios..."
    
    # Crear directorios con permisos correctos
    mkdir -p logs templates backups
    
    # Configurar permisos
    chmod 755 logs templates backups
    
    echo -e "${GREEN}‚úÖ Directorios creados${NC}"
    log_message "Directorios creados correctamente"
}

# Funci√≥n para configurar firewall
configure_firewall() {
    echo "üî• Configurando firewall..."
    
    # Verificar si ufw est√° instalado
    if command -v ufw &> /dev/null; then
        # Permitir puerto 5000 para Flask
        sudo ufw allow 5000/tcp
        
        echo -e "${GREEN}‚úÖ Firewall configurado${NC}"
        log_message "Firewall configurado para puerto 5000"
    else
        echo -e "${YELLOW}‚ö†Ô∏è UFW no est√° instalado${NC}"
        log_message "UFW no est√° disponible"
    fi
}

# Funci√≥n para crear archivos de configuraci√≥n
create_docker_config() {
    echo "üìÑ Creando configuraci√≥n de Docker..."
    
    # Crear archivo de configuraci√≥n
    cat > docker-config.txt << EOF
# Configuraci√≥n Docker SecuGen
# ============================

Fecha configuraci√≥n: $(date)
Usuario: $USUARIO_ACTUAL
Docker: $(docker --version 2>/dev/null || echo "No instalado")
Docker Compose: $(docker-compose --version 2>/dev/null || echo "No instalado")

# Comandos Docker:
# Construir: docker-compose build
# Iniciar: docker-compose up -d
# Parar: docker-compose down
# Logs: docker-compose logs -f
# Estado: docker-compose ps

# Comandos de contenedor:
# Acceder: docker exec -it secugen-fingerprint-api bash
# Reiniciar: docker-compose restart
# Limpiar: docker system prune -a

# Verificaciones:
# - lsusb | grep "1162:2201" (dispositivo)
# - docker ps (contenedores)
# - curl -X POST http://localhost:5000/initialize (API)
EOF
    
    echo -e "${GREEN}‚úÖ Configuraci√≥n de Docker creada${NC}"
    log_message "Configuraci√≥n de Docker creada"
}

# Funci√≥n para verificar instalaci√≥n
verify_installation() {
    echo "‚úÖ Verificando instalaci√≥n..."
    
    # Verificar Docker
    if docker --version >/dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ Docker funciona${NC}"
    else
        echo -e "${RED}‚ùå Docker no funciona${NC}"
        return 1
    fi
    
    # Verificar Docker Compose
    if docker-compose --version >/dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ Docker Compose funciona${NC}"
    else
        echo -e "${RED}‚ùå Docker Compose no funciona${NC}"
        return 1
    fi
    
    # Verificar grupos de usuario
    if groups "$USUARIO_ACTUAL" | grep -q "docker"; then
        echo -e "${GREEN}‚úÖ Usuario en grupo docker${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è Usuario no en grupo docker${NC}"
        echo "Ser√° necesario reiniciar sesi√≥n o reboot"
    fi
    
    # Verificar reglas udev
    if [ -f "/etc/udev/rules.d/99SecuGen.rules" ]; then
        echo -e "${GREEN}‚úÖ Reglas udev instaladas${NC}"
    else
        echo -e "${RED}‚ùå Reglas udev no instaladas${NC}"
        return 1
    fi
    
    log_message "Verificaci√≥n completada"
    return 0
}

# Funci√≥n para mostrar resumen
show_summary() {
    echo -e "\n${GREEN}üéâ ¬°CONFIGURACI√ìN DEL HOST COMPLETADA!${NC}"
    echo "======================================"
    echo ""
    echo "üìã RESUMEN DE LA CONFIGURACI√ìN:"
    echo "   ‚úÖ Docker instalado y configurado"
    echo "   ‚úÖ Docker Compose instalado"
    echo "   ‚úÖ Reglas udev instaladas"
    echo "   ‚úÖ Permisos USB configurados"
    echo "   ‚úÖ Directorios creados"
    echo "   ‚úÖ Firewall configurado"
    echo ""
    echo "üê≥ PR√ìXIMOS PASOS:"
    echo "   1. Reiniciar sesi√≥n o reboot (para grupos de usuario)"
    echo "   2. Ejecutar: docker-compose up -d"
    echo "   3. Verificar: curl -X POST http://localhost:5000/initialize"
    echo ""
    echo "üîß COMANDOS √öTILES:"
    echo "   docker-compose up -d      # Iniciar contenedores"
    echo "   docker-compose down       # Parar contenedores"
    echo "   docker-compose logs -f    # Ver logs"
    echo "   docker-compose ps         # Ver estado"
    echo ""
    echo "üìä Ver logs: tail -f $LOG_FILE"
}

# Funci√≥n principal
main() {
    log_message "=== INICIANDO CONFIGURACI√ìN HOST DOCKER ==="
    
    show_step "1" "VERIFICACIONES INICIALES"
    check_root
    check_sudo
    
    show_step "2" "VERIFICACI√ìN/INSTALACI√ìN DOCKER"
    check_docker
    
    show_step "3" "VERIFICACI√ìN DISPOSITIVO USB"
    verify_usb_device
    
    show_step "4" "REGLAS UDEV"
    install_udev_rules
    
    show_step "5" "PERMISOS USB"
    configure_usb_permissions
    
    show_step "6" "DIRECTORIOS"
    create_directories
    
    show_step "7" "FIREWALL"
    configure_firewall
    
    show_step "8" "CONFIGURACI√ìN DOCKER"
    create_docker_config
    
    show_step "9" "VERIFICACI√ìN"
    verify_installation
    
    show_step "10" "RESUMEN"
    show_summary
    
    log_message "Configuraci√≥n del host completada exitosamente"
}

# Manejo de se√±ales
trap 'echo -e "\n${YELLOW}‚èπÔ∏è Configuraci√≥n interrumpida${NC}"; exit 1' INT TERM

# Ejecutar funci√≥n principal
main "$@"

# Preguntar sobre reinicio
echo -e "\n${BLUE}¬øQuieres reiniciar sesi√≥n ahora para aplicar cambios de grupos? (y/n)${NC}"
read -r response
if [[ "$response" =~ ^[Yy]$ ]]; then
    echo "üîÑ Cerrando sesi√≥n..."
    gnome-session-quit --logout --no-prompt 2>/dev/null || pkill -KILL -u "$USUARIO_ACTUAL"
else
    echo -e "${YELLOW}‚ö†Ô∏è Recuerda reiniciar sesi√≥n o hacer reboot antes de usar Docker${NC}"
fi 