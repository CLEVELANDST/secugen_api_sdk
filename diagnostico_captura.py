#!/usr/bin/env python3

import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), 'sdk'))

from sdk import PYSGFPLib
from sdk.sgfdxerrorcode import SGFDxErrorCode
from ctypes import c_int, byref, c_long, c_ubyte, POINTER, c_bool
import time

def diagnosticar_captura():
    print("üîß Diagn√≥stico de Captura de Huella SecuGen")
    print("=" * 50)
    
    try:
        # Paso 1: Crear instancia
        print("1. Creando instancia del SDK...")
        sgfp = PYSGFPLib()
        print("   ‚úÖ Instancia creada exitosamente")
        
        # Paso 2: Crear dispositivo
        print("\n2. Inicializando dispositivo...")
        err = sgfp.Create()
        if err != SGFDxErrorCode.SGFDX_ERROR_NONE:
            print(f"   ‚ùå Error en Create(): {err}")
            return
        print("   ‚úÖ Create() exitoso")
        
        # Paso 3: Inicializar
        print("\n3. Ejecutando Init()...")
        err = sgfp.Init(1)
        if err != SGFDxErrorCode.SGFDX_ERROR_NONE:
            print(f"   ‚ùå Error en Init(): {err}")
            return
        print("   ‚úÖ Init() exitoso")
        
        # Paso 4: Abrir dispositivo
        print("\n4. Abriendo dispositivo...")
        device_opened = False
        for device_id in [0, 1]:
            print(f"   Probando dispositivo ID: {device_id}")
            err = sgfp.OpenDevice(device_id)
            if err == SGFDxErrorCode.SGFDX_ERROR_NONE:
                print(f"   ‚úÖ Dispositivo abierto con ID: {device_id}")
                device_opened = True
                break
            else:
                print(f"   ‚ö†Ô∏è Error con dispositivo {device_id}: {err}")
        
        if not device_opened:
            print("   ‚ùå No se pudo abrir ning√∫n dispositivo")
            return
        
        # Paso 5: Obtener informaci√≥n del dispositivo
        print("\n5. Obteniendo informaci√≥n del dispositivo...")
        width = c_long(0)
        height = c_long(0)
        err = sgfp.GetDeviceInfo(width, height)
        if err != SGFDxErrorCode.SGFDX_ERROR_NONE:
            print(f"   ‚ùå Error en GetDeviceInfo(): {err}")
            print("   üí° C√≥digo de error 2 = SGFDX_ERROR_FUNCTION_FAILED")
            print("   üí° Esto puede significar:")
            print("      - El dispositivo no responde")
            print("      - Driver no instalado correctamente")
            print("      - Dispositivo ocupado por otro proceso")
            return
        
        print(f"   ‚úÖ Dimensiones obtenidas: {width.value}x{height.value}")
        
        # Paso 6: Control de LED
        print("\n6. Probando control de LED...")
        try:
            err = sgfp.SetLedOn(True)
            if err == SGFDxErrorCode.SGFDX_ERROR_NONE:
                print("   ‚úÖ LED encendido")
                time.sleep(1)
                err = sgfp.SetLedOn(False)
                if err == SGFDxErrorCode.SGFDX_ERROR_NONE:
                    print("   ‚úÖ LED apagado")
                else:
                    print(f"   ‚ö†Ô∏è Error al apagar LED: {err}")
            else:
                print(f"   ‚ö†Ô∏è Error al encender LED: {err}")
        except Exception as e:
            print(f"   ‚ö†Ô∏è Error en control de LED: {e}")
        
        # Paso 7: Preparar captura
        print("\n7. Preparando captura de imagen...")
        buffer_size = width.value * height.value
        imageBuffer = bytearray(buffer_size)
        print(f"   ‚úÖ Buffer creado: {buffer_size} bytes")
        
        # Paso 8: Intentar captura
        print("\n8. Intentando captura de imagen...")
        print("   üí° Coloque el dedo en el sensor ahora...")
        
        # Encender LED
        sgfp.SetLedOn(True)
        
        max_attempts = 3
        for attempt in range(max_attempts):
            print(f"   Intento {attempt + 1}/{max_attempts}")
            err = sgfp.GetImage(imageBuffer)
            
            if err == SGFDxErrorCode.SGFDX_ERROR_NONE:
                print("   ‚úÖ ¬°Imagen capturada exitosamente!")
                break
            elif err == 2:  # SGFDX_ERROR_FUNCTION_FAILED
                print(f"   ‚ùå Error de funci√≥n (c√≥digo 2)")
                print("   üí° Posibles causas:")
                print("      - No hay dedo en el sensor")
                print("      - Dedo mal posicionado")
                print("      - Sensor sucio")
                print("      - Presi√≥n insuficiente")
            else:
                print(f"   ‚ùå Error inesperado: {err}")
            
            if attempt < max_attempts - 1:
                print("   ‚è≥ Esperando 2 segundos...")
                time.sleep(2)
        
        # Apagar LED
        sgfp.SetLedOn(False)
        
        if err != SGFDxErrorCode.SGFDX_ERROR_NONE:
            print(f"\n‚ùå Captura fall√≥ despu√©s de {max_attempts} intentos")
            print("\nüîß SOLUCIONES SUGERIDAS:")
            print("1. Aseg√∫rese de que su dedo est√© limpio y seco")
            print("2. Presione firmemente el dedo en el centro del sensor")
            print("3. Mantenga el dedo inm√≥vil durante la captura")
            print("4. Verifique que el sensor est√© limpio")
            print("5. Intente con un dedo diferente")
        else:
            print(f"\n‚úÖ ¬°DIAGN√ìSTICO EXITOSO!")
            print(f"   Imagen capturada: {len(imageBuffer)} bytes")
        
        # Paso 9: Limpiar
        print("\n9. Limpiando recursos...")
        try:
            sgfp.CloseDevice()
            print("   ‚úÖ Dispositivo cerrado")
        except:
            print("   ‚ö†Ô∏è Error al cerrar dispositivo")
            
    except Exception as e:
        print(f"\n‚ùå Error cr√≠tico: {str(e)}")
        print(f"   Tipo: {type(e).__name__}")
    
    print("\nüèÅ Diagn√≥stico completado")

if __name__ == "__main__":
    diagnosticar_captura() 