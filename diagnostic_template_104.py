#!/usr/bin/env python3
"""
Diagn√≥stico para Error 104 (SGFDX_ERROR_INVALID_TEMPLATE2)
Este script diagnostica problemas con templates inv√°lidos en SecuGen SDK
"""

import requests
import json
import base64
import sys
import time

# Configuraci√≥n del servidor Flask
SERVER_URL = "http://localhost:5000"

def test_server_connection():
    """Verificar conectividad con el servidor"""
    try:
        response = requests.get(f"{SERVER_URL}/templates")
        if response.status_code == 200:
            print("‚úÖ Servidor Flask conectado")
            return True
        else:
            print(f"‚ùå Servidor responde con c√≥digo: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Error de conexi√≥n: {e}")
        return False

def get_templates_info():
    """Obtener informaci√≥n detallada de todos los templates"""
    try:
        response = requests.get(f"{SERVER_URL}/templates/info")
        if response.status_code == 200:
            data = response.json()
            if data['success']:
                return data['info']
            else:
                print(f"‚ùå Error obteniendo info: {data.get('error', 'Desconocido')}")
                return None
        else:
            print(f"‚ùå Error HTTP: {response.status_code}")
            return None
    except Exception as e:
        print(f"‚ùå Error en get_templates_info: {e}")
        return None

def validate_template_format(template_data):
    """Validar formato y estructura del template"""
    try:
        if isinstance(template_data, str):
            # Decodificar base64
            try:
                template_bytes = base64.b64decode(template_data)
            except Exception as e:
                return {"valid": False, "error": f"Error decodificando base64: {e}"}
        else:
            template_bytes = template_data
            
        # Verificar tama√±o
        expected_size = 400  # SG400 template size
        actual_size = len(template_bytes)
        
        if actual_size != expected_size:
            return {
                "valid": False, 
                "error": f"Tama√±o incorrecto: esperado {expected_size}, actual {actual_size}"
            }
        
        # Verificar que no sean todos zeros
        if all(b == 0 for b in template_bytes):
            return {"valid": False, "error": "Template vac√≠o (todos zeros)"}
        
        # Verificar que haya suficiente variabilidad
        unique_bytes = len(set(template_bytes))
        if unique_bytes < 10:  # Muy poca variabilidad
            return {
                "valid": False, 
                "error": f"Template sospechoso: solo {unique_bytes} bytes √∫nicos"
            }
        
        return {
            "valid": True,
            "size": actual_size,
            "unique_bytes": unique_bytes,
            "first_10_bytes": list(template_bytes[:10]),
            "last_10_bytes": list(template_bytes[-10:])
        }
        
    except Exception as e:
        return {"valid": False, "error": f"Error validando: {e}"}

def capture_new_template(template_id="test_diagnostic"):
    """Capturar nueva huella para diagn√≥stico"""
    try:
        print(f"üîÑ Capturando nueva huella con ID: {template_id}")
        print("‚ö†Ô∏è  Coloque el dedo en el sensor cuando se encienda el LED...")
        
        payload = {
            "save_image": False,
            "create_template": True,
            "template_id": template_id
        }
        
        response = requests.post(f"{SERVER_URL}/capturar-huella", json=payload)
        
        if response.status_code == 200:
            data = response.json()
            if data['success']:
                print(f"‚úÖ Huella capturada exitosamente")
                print(f"üì¶ Template ID: {data.get('template_stored', 'N/A')}")
                
                # Validar el template capturado
                template_data = data.get('template')
                if template_data:
                    validation = validate_template_format(template_data)
                    if validation['valid']:
                        print(f"‚úÖ Template v√°lido: {validation['size']} bytes, {validation['unique_bytes']} bytes √∫nicos")
                        return template_data
                    else:
                        print(f"‚ùå Template inv√°lido: {validation['error']}")
                        return None
                else:
                    print("‚ùå No se recibi√≥ template en la respuesta")
                    return None
            else:
                print(f"‚ùå Error capturando: {data.get('error', 'Desconocido')}")
                return None
        else:
            print(f"‚ùå Error HTTP: {response.status_code}")
            return None
            
    except Exception as e:
        print(f"‚ùå Error en capture_new_template: {e}")
        return None

def test_template_comparison(template1_id, template2_id):
    """Probar comparaci√≥n entre dos templates con diagn√≥stico detallado"""
    try:
        print(f"üîç Probando comparaci√≥n: {template1_id} vs {template2_id}")
        
        payload = {
            "template1_id": template1_id,
            "template2_id": template2_id,
            "security_level": 5  # Nivel medio para pruebas
        }
        
        response = requests.post(f"{SERVER_URL}/comparar-huellas", json=payload)
        
        if response.status_code == 200:
            data = response.json()
            if data['success']:
                print(f"‚úÖ Comparaci√≥n exitosa:")
                print(f"   Match: {data['matched']}")
                print(f"   Score: {data['score']}")
                print(f"   Mensaje: {data['message']}")
                return True
            else:
                error_msg = data.get('error', 'Error desconocido')
                print(f"‚ùå Error en comparaci√≥n: {error_msg}")
                
                # An√°lisis espec√≠fico del error 104
                if "c√≥digo 104" in error_msg:
                    print("üîç ERROR 104 DETECTADO - An√°lisis espec√≠fico:")
                    print("   ‚Ä¢ Error: SGFDX_ERROR_INVALID_TEMPLATE2")
                    print("   ‚Ä¢ Causa: El segundo template es inv√°lido o corrupto")
                    print("   ‚Ä¢ Soluci√≥n: Verificar formato y regenerar template")
                    
                    # Diagnosticar el template2 espec√≠ficamente
                    print(f"üîß Diagnosticando template2 ({template2_id})...")
                    return diagnose_specific_template(template2_id)
                    
                return False
        else:
            print(f"‚ùå Error HTTP: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå Error en test_template_comparison: {e}")
        return False

def diagnose_specific_template(template_id):
    """Diagnosticar un template espec√≠fico"""
    try:
        # Obtener info del template
        info = get_templates_info()
        if not info or template_id not in info['templates']:
            print(f"‚ùå Template {template_id} no encontrado")
            return False
            
        template_info = info['templates'][template_id]
        print(f"üìä Info del template {template_id}:")
        print(f"   ‚Ä¢ Tama√±o: {template_info['size_bytes']} bytes")
        print(f"   ‚Ä¢ Formato: {template_info['format']}")
        print(f"   ‚Ä¢ Base64 size: {template_info['base64_size']}")
        
        # Sugerir regeneraci√≥n
        print(f"üí° Sugerencia: Regenerar template {template_id}")
        regenerate = input("¬øDesea regenerar el template? (s/n): ").lower().strip()
        
        if regenerate == 's':
            new_template = capture_new_template(template_id)
            if new_template:
                print(f"‚úÖ Template {template_id} regenerado exitosamente")
                return True
            else:
                print(f"‚ùå Error regenerando template {template_id}")
                return False
        else:
            print("‚ö†Ô∏è  Template no regenerado")
            return False
            
    except Exception as e:
        print(f"‚ùå Error en diagnose_specific_template: {e}")
        return False

def main():
    print("üîç DIAGN√ìSTICO ERROR 104 - TEMPLATE INV√ÅLIDO")
    print("=" * 50)
    
    # 1. Verificar conexi√≥n
    if not test_server_connection():
        print("‚ùå No se puede conectar al servidor Flask")
        sys.exit(1)
    
    # 2. Obtener informaci√≥n de templates
    print("\nüìã TEMPLATES ALMACENADOS:")
    info = get_templates_info()
    if not info:
        print("‚ùå No se pudo obtener informaci√≥n de templates")
        sys.exit(1)
    
    print(f"   ‚Ä¢ Total templates: {info['count']}")
    print(f"   ‚Ä¢ Tama√±o total: {info['total_size_bytes']} bytes")
    print(f"   ‚Ä¢ Tama√±o promedio: {info['avg_size_bytes']:.1f} bytes")
    
    # 3. Validar cada template
    print("\nüîç VALIDANDO TEMPLATES:")
    for template_id, template_info in info['templates'].items():
        print(f"\nüìù Template: {template_id}")
        print(f"   ‚Ä¢ Tama√±o: {template_info['size_bytes']} bytes")
        
        # Validar formato (necesitar√≠amos obtener el contenido real)
        if template_info['size_bytes'] != 400:
            print(f"   ‚ö†Ô∏è  Tama√±o incorrecto: esperado 400, actual {template_info['size_bytes']}")
        else:
            print(f"   ‚úÖ Tama√±o correcto")
    
    # 4. Probar comparaciones si hay templates
    template_list = list(info['templates'].keys())
    if len(template_list) >= 2:
        print("\nüîç PROBANDO COMPARACIONES:")
        
        # Probar primera comparaci√≥n
        template1 = template_list[0]
        template2 = template_list[1]
        
        print(f"\nüîÑ Comparaci√≥n 1: {template1} vs {template2}")
        test_template_comparison(template1, template2)
        
        # Si hay m√°s templates, probar otras combinaciones
        if len(template_list) > 2:
            template3 = template_list[2]
            print(f"\nüîÑ Comparaci√≥n 2: {template1} vs {template3}")
            test_template_comparison(template1, template3)
    
    # 5. Capturar nueva huella para pruebas
    print("\nüÜï CAPTURA DE NUEVA HUELLA:")
    capture_choice = input("¬øDesea capturar una nueva huella para pruebas? (s/n): ").lower().strip()
    
    if capture_choice == 's':
        new_template = capture_new_template("test_diagnostic_new")
        if new_template and template_list:
            print(f"\nüîÑ Comparando nueva huella con {template_list[0]}")
            test_template_comparison("test_diagnostic_new", template_list[0])
    
    print("\n‚úÖ Diagn√≥stico completado")
    print("\nüí° RECOMENDACIONES:")
    print("   ‚Ä¢ Si persiste error 104, regenerar templates corruptos")
    print("   ‚Ä¢ Verificar estabilidad del dispositivo")
    print("   ‚Ä¢ Capturar huellas con buena calidad")
    print("   ‚Ä¢ Usar nivel de seguridad apropiado (4-6)")

if __name__ == "__main__":
    main() 